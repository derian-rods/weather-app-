{"version":3,"sources":["assets/040-earth.svg","components/CurrentWeather/index.js","components/DailyWeather/index.js","components/HourlyWeather/index.js","components/HumidityWeather/index.js","components/WindWeather/index.js","types/types.js","actions/weatherActions.js","screen/LoadingScreen/index.js","screen/Main/index.js","store/store.js","reducers/weatherReducer.js","App.js","index.js"],"names":["module","exports","CurrentWeather","useSelector","state","weather","data","current","name","className","translate","temp_c","condition","text","DailyWather","daily","summaryDayHour","map","day","date_epoch","key","moment","unix","format","src","icon","alt","avgtemp_c","mintemp_c","HourlyWeather","hour","hourly","time_epoch","Math","round","HumidityWeather","avghumidity","uv","value","maxValue","styles","buildStyles","rotation","textColor","trailColor","pathColor","WindWeather","wind_dir","maxwind_mph","xmlns","version","viewBox","width","id","d","types","setCoords","coords","type","payload","startGetInfo","dispatch","getState","a","lat","long","fetch","rep","rep2","json","forecast","forecastday","dayHour","console","log","LoadingScreen","useDispatch","useEffect","navigator","geolocation","getCurrentPosition","location","latitude","longitude","Swal","fire","earth","Main","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b88985b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/040-earth.0d3e61ea.svg\";","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const CurrentWeather = () => {\r\n    const {current, name} = useSelector(state => state.weather.data)\r\n    return (\r\n        <div className='temp' translate='no'>\r\n            {/* <i  role='button' className=\"fas fa-search-location fa-lg\"></i> */}\r\n            <div className='temp__header'>\r\n                <span className='temp__title'>{name}</span> \r\n                <i className=\"fas fa-map-pin\"></i>\r\n            </div>\r\n            <div className='temp__body'>\r\n                <h2 className='temp__body-title'>{`${current.temp_c}ºC`}</h2>\r\n                {/* <img className='temp__body-img' src={current.condition.icon} alt={current.condition.text} /> */}\r\n                <span className='temp__body-text'>{`${current.condition.text}`}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DailyWather = () => {\r\n    const state = useSelector(state => state.weather.data.summaryDayHour)\r\n    \r\n    const daily = state.map(day => {\r\n        const {date_epoch, weather} = day\r\n        return{\r\n            date_epoch,\r\n            weather\r\n        }\r\n    });\r\n    return (\r\n        <div className='daily' translate='no'>\r\n            <div className='daily__container'>\r\n                {\r\n                    daily.map(day => (\r\n                        <div className='daily__card' key={day.date_epoch}>\r\n                        <div className='daily__card-date'>                    \r\n                            <span>{moment.unix(day.date_epoch).format('dddd, MMM. D')}</span>\r\n                        </div>\r\n                        <div className='daily__Card-icon'>\r\n                            <img src={day.weather.condition.icon} alt={day.weather.condition.text}/>\r\n                        </div>\r\n                        <div className='daily__Card-temp'>\r\n                        <span>{`${day.weather.avgtemp_c}ºC / ${day.weather.mintemp_c}ºC`}</span>\r\n                        </div>\r\n                    </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment'\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const HourlyWeather = () => {\r\n    \r\n    const state = useSelector(state => state.weather.data.summaryDayHour)\r\n    const {hour} = state[0]\r\n    return (\r\n        <div className='hourly'>\r\n            <div className='hourly__container' translate='no'>\r\n                {\r\n                    hour.map(hourly => (\r\n                        <div className='hourly__card' key={hourly.time_epoch}>\r\n                        <div className='hourly__header'>\r\n                            <span className='hourly__time'>{moment.unix(hourly.time_epoch).format('LT')}</span>\r\n                        </div>\r\n                        <div className='hourly__body'>\r\n                            <img className='hourly__icon' src={hourly.condition.icon} alt={hourly.condition.text}/>\r\n                            <div className='hourly__footer'>\r\n                            <span className='hourly__description'>{hourly.condition.text}</span>\r\n                            <span className='hourly__temp'>{`${Math.round(hourly.temp_c)}ºC`}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    ))\r\n                }\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\nexport const HumidityWeather = () => {\r\n    \r\n    const {avghumidity, uv, avgtemp_c} = useSelector(state => state.weather.data.summaryDayHour[0].weather);\r\n    return (\r\n        <div>\r\n              <div className='humidity' >\r\n            <div className='humidity__container'>\r\n                <div className='humidity__card'>\r\n                    <div className='humidity__icon'>\r\n                        <h4>Humidity</h4>\r\n                       <CircularProgressbar value={Math.round(avghumidity)}  maxValue={100} text={`${avghumidity}%`} styles={buildStyles({rotation: 0.70, textColor: '#fff',trailColor: '#fff',  pathColor: ` #6dd5fa`\r\n})}/>\r\n                    </div>\r\n                    <div className='humidity__info'>\r\n                        <p> <strong>Feels like</strong>  <small>{`${avgtemp_c}ºC`}</small> </p>\r\n                        <p> <strong>UV index</strong>  <small>{uv}</small></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const WindWeather = () => {\r\n\r\n    const {wind_dir} = useSelector(state => state.weather.data.summaryDayHour[0].hour[0])\r\n    const {maxwind_mph} = useSelector(state => state.weather.data.summaryDayHour[0].weather);\r\n    return (\r\n        <div className='wind' >\r\n            <div className='wind__container'>\r\n                <div className='wind__card'>\r\n                    <div className='wind__icon'>\r\n                        <h4>Wind</h4>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\"  version=\"1.1\" viewBox=\"-17 0 134 134.12257\" width=\"134pt\">\r\n                            <g id=\"surface1\">\r\n                            <path d=\"M 40.945312 124.355469 L 60.710938 124.355469 L 53.324219 59.339844 C 56.039062 57.964844 57.121094 54.652344 55.742188 51.941406 C 54.367188 49.230469 51.054688 48.148438 48.34375 49.519531 C 45.632812 50.898438 44.550781 54.210938 45.921875 56.921875 C 46.457031 57.964844 47.300781 58.808594 48.34375 59.339844 Z M 40.945312 124.355469 \" />\r\n                            <path d=\"M 39.824219 134.121094 L 61.820312 134.121094 L 61.132812 128.042969 L 40.507812 128.042969 Z M 39.824219 134.121094 \" />\r\n                            <path id='s1' d=\"M 55.742188 61.007812 C 62.21875 65.496094 82.09375 77.972656 100.574219 76.453125 L 100.65625 76.253906 C 89.292969 61.578125 66.660156 55.394531 58.976562 53.648438 C 58.992188 53.917969 58.992188 54.1875 58.976562 54.457031 C 58.988281 57.027344 57.789062 59.453125 55.742188 61.007812 Z M 55.742188 61.007812 \" />\r\n                            <path id='s2' d=\"M 45.628906 60.847656 C 43.40625 59.046875 42.292969 56.203125 42.71875 53.375 C 34.96875 54.785156 12.09375 60.011719 0.0625 74.183594 L 0.140625 74.382812 C 18.582031 76.636719 38.96875 65.003906 45.628906 60.847656 Z M 45.628906 60.847656 \"  />\r\n                            <path id='s3' d=\"M 50.824219 46.265625 C 52.230469 46.265625 53.609375 46.628906 54.828125 47.320312 C 56.324219 39.589844 59.8125 16.378906 50.921875 0 L 50.710938 0 C 41.867188 16.351562 45.308594 39.566406 46.800781 47.320312 C 48.027344 46.628906 49.410156 46.265625 50.824219 46.265625 Z M 50.824219 46.265625 \" />\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n                    <div className='wind__info'>\r\n                        <p> <strong>Direction</strong>  <small>{wind_dir}</small> </p>\r\n                        <p> <strong>Speed</strong>  <small className='wind__text-speed'>{Math.round(maxwind_mph)}km/h</small></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const types={\r\n    startGetData: '[GET] start get data',\r\n    setData: '[DATA] set data',\r\n    setCoords: '[GEO] set coords',\r\n}","import Swal from 'sweetalert2';\r\nimport {types} from '../types/types';\r\n\r\n\r\nexport const setData = (data) =>({\r\n    type: types.startGetData,\r\n    payload: data\r\n})  \r\n\r\nexport const startGetCoords = () => {\r\n    return  (dispatch) => {\r\n        navigator.geolocation.getCurrentPosition(success, error);\r\n        function success (location) {\r\n            const coords = {\r\n                lat: Math.round(location.coords.latitude * 100) / 100,\r\n                long: Math.round(location.coords.longitude * 100) / 100\r\n            }\r\n            dispatch(setCoords(coords))\r\n            dispatch(startGetInfo())\r\n        } \r\n        function error (){\r\n            Swal.fire('Oops...', 'GPS or geolocation is disabled, please enable it and reload', 'error')\r\n        }  \r\n    }\r\n}\r\nexport const setCoords = (coords) =>({\r\n    type: types.setCoords,\r\n    payload: coords\r\n})\r\n\r\nexport const startGetInfo  = () => {\r\n    return async (dispatch, getState) => {\r\n     try {\r\n        const {lat, long} = getState().weather.coords\r\n        const rep =  await fetch(`https://api.weatherapi.com/v1/forecast.json?key=5c4c901768b94769858104345201010&q=${lat},${long}&days=7`)\r\n        const rep2 = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=24bace733a5b81a90ac834a66b7df627`)\r\n        const {name} = await rep2.json();\r\n        const {current, forecast} = await rep.json();\r\n        const {temp_c, condition} = current;\r\n        const {forecastday} = forecast;\r\n        const summaryDayHour = forecastday.map(dayHour => {\r\n            const {date_epoch, day:weather, hour} = dayHour\r\n            return {\r\n                date_epoch,\r\n                weather,\r\n                hour\r\n            }\r\n        })\r\n        const dataRef = {\r\n                name,\r\n                current:{\r\n                    temp_c,\r\n                    condition\r\n                },\r\n                summaryDayHour\r\n        }\r\n        dispatch(setData(dataRef))\r\n     } catch (err) {\r\n        console.log(err)\r\n    }\r\n    }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch} from 'react-redux';\r\nimport { startGetCoords} from '../../actions/weatherActions';\r\nimport earth from '../../assets/040-earth.svg';\r\n\r\nexport const LoadingScreen = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startGetCoords());\r\n    }, [dispatch])\r\n    \r\n    return (\r\n        <div className='add__city' translate='no'>\r\n            <div className='add__city-container'>\r\n                <div className='add__city-brading'>\r\n                    <img className='add__city-logo' src={earth} alt='Weather-app' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n ","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { CurrentWeather } from '../../components/CurrentWeather';\r\nimport { DailyWather } from '../../components/DailyWeather';\r\nimport { HourlyWeather } from '../../components/HourlyWeather';\r\nimport { HumidityWeather } from '../../components/HumidityWeather';\r\nimport { WindWeather } from '../../components/WindWeather';\r\nimport { LoadingScreen } from '../LoadingScreen';\r\nexport const Main = () => {\r\n    \r\n    const {data} = useSelector(state => state.weather);\r\n\r\n\r\n    return (\r\n            <>\r\n              {  (!data) ? \r\n                    <LoadingScreen />\r\n                : \r\n                (\r\n                    <>\r\n                <h1 translate='no'>This site web is only for mobile </h1>        \r\n                <main translate='no'>\r\n                  <CurrentWeather />\r\n                  <HourlyWeather />\r\n                  <DailyWather />\r\n                  <WindWeather />\r\n                  <HumidityWeather />\r\n                </main>\r\n                    </>\r\n                )}\r\n                \r\n\r\n            </>\r\n\r\n    )\r\n}\r\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {weather} from '../reducers/weatherReducer'\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst reducers = combineReducers({\r\n  weather\r\n});\r\n\r\nexport const store = createStore(\r\n    reducers, \r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n    )","import {types} from '../types/types'\r\n\r\nexport const weather = (state={}, action) => {\r\n    switch(action.type){\r\n        case types.startGetData:\r\n            return{\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        case types.setCoords:\r\n            return{\r\n                ...state,\r\n                coords: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {Main} from './screen/Main'\nimport {store} from './store/store';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/style.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}